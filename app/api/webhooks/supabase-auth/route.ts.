import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';
import { Resend } from 'resend';

// Initialize Supabase client with service role key for admin access
const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
);

// Initialize Resend client
const resend = new Resend(process.env.RESEND_API_KEY);

interface SupabaseWebhookPayload {
  type: 'UPDATE' | 'INSERT' | 'DELETE';
  table: string;
  schema: string;
  record: {
    id: string;
    email: string;
    last_sign_in_at: string;
    user_metadata?: any;
    [key: string]: any;
  };
  old_record?: any;
}

interface UserSecurityEvent {
  id: string;
  user_id: string;
  ip_address: string;
  user_agent: string;
  city?: string;
  country?: string;
  event_type: 'login' | 'new_device';
  created_at: string;
}

/**
 * Validates webhook signature/secret
 */
function validateWebhookSecret(request: NextRequest): boolean {
  const webhookSecret = process.env.SUPABASE_WEBHOOK_SECRET;
  if (!webhookSecret) {
    console.error('SUPABASE_WEBHOOK_SECRET not configured');
    return false;
  }

  // Check for secret in multiple possible header formats
  const authHeader = request.headers.get('authorization');
  const secretHeader = request.headers.get('x-supabase-signature');
  const bearerSecret = request.headers.get('x-webhook-secret');

  const providedSecret = authHeader?.replace('Bearer ', '') || 
                        secretHeader || 
                        bearerSecret;

  return providedSecret === webhookSecret;
}

/**
 * Extract location information from IP address using a geolocation service
 */
async function getLocationFromIP(ipAddress: string): Promise<{ city?: string; country?: string }> {
  try {
    // Using ipapi.co for free geolocation (you can replace with your preferred service)
    const response = await fetch(`https://ipapi.co/${ipAddress}/json/`, {
      headers: {
        'User-Agent': 'CLAIMSO-Security-Monitor/1.0'
      },
      timeout: 5000
    });

    if (response.ok) {
      const data = await response.json();
      return {
        city: data.city || 'Unknown City',
        country: data.country_name || data.country || 'Unknown Country'
      };
    }
  } catch (error) {
    console.error('Geolocation lookup failed:', error);
  }

  return { city: 'Unknown City', country: 'Unknown Country' };
}

/**
 * Check if IP address is known for this user
 */
async function isKnownIP(userId: string, ipAddress: string): Promise<boolean> {
  try {
    const { data, error } = await supabase
      .from('user_security_events')
      .select('id')
      .eq('user_id', userId)
      .eq('ip_address', ipAddress)
      .limit(1);

    if (error) {
      console.error('Error checking known IP:', error);
      return false; // Assume unknown on error for security
    }

    return data && data.length > 0;
  } catch (error) {
    console.error('Exception checking known IP:', error);
    return false;
  }
}

/**
 * Record security event in database
 */
async function recordSecurityEvent(
  userId: string,
  ipAddress: string,
  userAgent: string,
  city: string,
  country: string,
  eventType: 'login' | 'new_device'
): Promise<void> {
  try {
    const { error } = await supabase
      .from('user_security_events')
      .insert({
        user_id: userId,
        ip_address: ipAddress,
        user_agent: userAgent,
        city,
        country,
        event_type: eventType,
        created_at: new Date().toISOString()
      });

    if (error) {
      console.error('Error recording security event:', error);
      throw error;
    }
  } catch (error) {
    console.error('Exception recording security event:', error);
    throw error;
  }
}

/**
 * Send security alert email using Resend
 */
async function sendSecurityAlertEmail(
  userEmail: string,
  city: string,
  country: string,
  ipAddress: string,
  timestamp: string
): Promise<void> {
  try {
    const formattedDate = new Date(timestamp).toLocaleString('en-US', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
      timeZoneName: 'short'
    });

    const { data, error } = await resend.emails.send({
      from: 'CLAIMSO Security <security@claimso.com>',
      to: [userEmail],
      subject: 'üîê New Device Login Alert - CLAIMSO',
      html: `
        <!DOCTYPE html>
        <html>
        <head>
          <meta charset="utf-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>CLAIMSO Security Alert</title>
        </head>
        <body style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px;">
          <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 30px; text-align: center; border-radius: 10px 10px 0 0;">
            <h1 style="color: white; margin: 0; font-size: 28px;">üîê Security Alert</h1>
            <p style="color: rgba(255, 255, 255, 0.9); margin: 10px 0 0 0; font-size: 16px;">New device login detected</p>
          </div>
          
          <div style="background: #f8f9fa; padding: 30px; border-radius: 0 0 10px 10px; border: 1px solid #e9ecef;">
            <h2 style="color: #495057; margin-top: 0;">Hello!</h2>
            
            <p>We detected a new login to your CLAIMSO account from a device we haven't seen before.</p>
            
            <div style="background: white; border-left: 4px solid #007bff; padding: 20px; margin: 20px 0; border-radius: 5px;">
              <h3 style="margin-top: 0; color: #007bff;">Login Details:</h3>
              <p style="margin: 5px 0;"><strong>Time:</strong> ${formattedDate}</p>
              <p style="margin: 5px 0;"><strong>Location:</strong> ${city}, ${country}</p>
              <p style="margin: 5px 0;"><strong>IP Address:</strong> ${ipAddress}</p>
            </div>
            
            <h3 style="color: #495057;">Was this you?</h3>
            <p><strong>If this was you:</strong> No action needed. This device is now recognized for future logins.</p>
            
            <p><strong>If this wasn't you:</strong></p>
            <ul>
              <li>Immediately change your password</li>
              <li>Review your recent account activity</li>
              <li>Contact our support team if you notice any suspicious activity</li>
            </ul>
            
            <div style="text-align: center; margin: 30px 0;">
              <a href="https://app.claimso.com/settings/security" 
                 style="background: #007bff; color: white; padding: 12px 24px; text-decoration: none; border-radius: 5px; font-weight: 500;">
                Review Account Security
              </a>
            </div>
            
            <hr style="border: none; border-top: 1px solid #dee2e6; margin: 30px 0;">
            
            <p style="font-size: 14px; color: #6c757d; margin: 0;">
              This is an automated security notification from CLAIMSO. If you have any concerns, please contact our support team.
            </p>
          </div>
        </body>
        </html>
      `,
      text: `
        CLAIMSO Security Alert - New Device Login

        We detected a new login to your CLAIMSO account from a device we haven't seen before.

        Login Details:
        Time: ${formattedDate}
        Location: ${city}, ${country}
        IP Address: ${ipAddress}

        If this was you: No action needed.
        If this wasn't you: Please change your password immediately and review your account activity.

        Visit https://app.claimso.com/settings/security to review your account security.
      `
    });

    if (error) {
      console.error('Error sending security alert email:', error);
      throw error;
    }

    console.log('Security alert email sent successfully:', data?.id);
  } catch (error) {
    console.error('Exception sending security alert email:', error);
    throw error;
  }
}

export async function POST(request: NextRequest) {
  try {
    // Validate webhook secret
    if (!validateWebhookSecret(request)) {
      console.error('Invalid webhook secret provided');
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    // Parse webhook payload
    let payload: SupabaseWebhookPayload;
    try {
      payload = await request.json();
    } catch (parseError) {
      console.error('Error parsing webhook payload:', parseError);
      return NextResponse.json(
        { error: 'Invalid JSON payload' },
        { status: 400 }
      );
    }

    // Validate payload structure
    if (!payload.record || !payload.record.id || !payload.record.email) {
      console.error('Invalid payload structure:', payload);
      return NextResponse.json(
        { error: 'Invalid payload structure' },
        { status: 400 }
      );
    }

    // Only process UPDATE events on auth.users table (login events)
    if (payload.type !== 'UPDATE' || payload.table !== 'users' || payload.schema !== 'auth') {
      return NextResponse.json({ message: 'Event ignored' });
    }

    // Check if this is actually a login event (last_sign_in_at was updated)
    const isLoginEvent = payload.record.last_sign_in_at && 
                        payload.old_record?.last_sign_in_at !== payload.record.last_sign_in_at;

    if (!isLoginEvent) {
      return NextResponse.json({ message: 'Not a login event' });
    }

    const userId = payload.record.id;
    const userEmail = payload.record.email;

    // Extract IP address and user agent from request headers or payload metadata
    // Note: In a real webhook, you might need to get this from the payload metadata
    const ipAddress = request.headers.get('x-forwarded-for')?.split(',')[0] || 
                     request.headers.get('x-real-ip') || 
                     '127.0.0.1'; // Fallback for development

    const userAgent = request.headers.get('user-agent') || 'Unknown';

    // Check if this IP is known for this user
    const isKnownDevice = await isKnownIP(userId, ipAddress);

    // Get location information
    const { city, country } = await getLocationFromIP(ipAddress);

    if (isKnownDevice) {
      // Record the login event but don't send alert
      await recordSecurityEvent(
        userId,
        ipAddress,
        userAgent,
        city || 'Unknown City',
        country || 'Unknown Country',
        'login'
      );

      console.log(`Known device login for user ${userId} from ${ipAddress}`);
      return NextResponse.json({ 
        message: 'Known device login recorded',
        new_device: false 
      });
    } else {
      // New device detected
      console.log(`New device login detected for user ${userId} from ${ipAddress}`);

      // Record the new device event
      await recordSecurityEvent(
        userId,
        ipAddress,
        userAgent,
        city || 'Unknown City',
        country || 'Unknown Country',
        'new_device'
      );

      // Send security alert email
      await sendSecurityAlertEmail(
        userEmail,
        city || 'Unknown City',
        country || 'Unknown Country',
        ipAddress,
        payload.record.last_sign_in_at
      );

      // TODO: Send push notification to user's Smart Pass device
      // This would integrate with your Smart Pass notification system
      console.log(`TODO: Send push notification to Smart Pass for user ${userId}`);

      return NextResponse.json({ 
        message: 'New device login processed and alert sent',
        new_device: true,
        location: { city, country }
      });
    }

  } catch (error) {
    console.error('Supabase auth webhook error:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}