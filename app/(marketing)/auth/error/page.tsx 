'use client'

import { useSearchParams } from 'next/navigation'
import { Suspense } from 'react'
import Link from 'next/link'
import { AlertTriangle, Home, RefreshCw } from 'lucide-react'
import { Card, CardContent, CardHeader } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Alert, AlertDescription } from '@/components/ui/alert'

// Error message mappings for better UX
const errorMessages: Record<string, string> = {
  // Amazon OAuth errors
  amazon_oauth_error: 'There was an issue connecting to your Amazon account. Please try again.',
  token_exchange_failed: 'We couldn\'t complete the Amazon login process. Please try again.',
  invalid_token_response: 'Amazon returned invalid authentication data. Please try again.',
  
  // General OAuth errors
  access_denied: 'You declined the authentication request. No worries - you can try again anytime.',
  invalid_request: 'There was a technical issue with the login request. Please try again.',
  server_error: 'Our authentication service is temporarily unavailable. Please try again in a few minutes.',
  
  // Configuration errors
  config_error: 'There\'s a configuration issue on our end. Our team has been notified.',
  missing_code: 'The authentication process was incomplete. Please try logging in again.',
  
  // Session errors
  no_session: 'Your session expired during login. Please try again.',
  invalid_state: 'The authentication request appears to be invalid. Please try again.',
  
  // Generic fallback
  unexpected_error: 'An unexpected error occurred during authentication. Please try again.'
}

// Component to handle search params (needs to be wrapped in Suspense)
function AuthErrorContent() {
  const searchParams = useSearchParams()
  
  // Read error parameters from URL - treat as untrusted user input
  const errorCode = searchParams.get('error') || 'unexpected_error'
  const customMessage = searchParams.get('message')
  
  // Sanitize and get error message
  const getErrorMessage = (): string => {
    if (customMessage) {
      // Sanitize custom message by treating as plain text only
      return String(customMessage).substring(0, 200) // Limit length
    }
    
    return errorMessages[errorCode] || errorMessages.unexpected_error
  }
  
  // Get user-friendly error title
  const getErrorTitle = (): string => {
    switch (errorCode) {
      case 'amazon_oauth_error':
      case 'token_exchange_failed':
        return 'Amazon Login Failed'
      case 'access_denied':
        return 'Login Cancelled'
      case 'config_error':
        return 'Service Unavailable'
      case 'server_error':
        return 'Temporary Issue'
      default:
        return 'Authentication Error'
    }
  }
  
  const errorMessage = getErrorMessage()
  const errorTitle = getErrorTitle()
  const isUserError = ['access_denied'].includes(errorCode)
  const isSystemError = ['config_error', 'server_error'].includes(errorCode)

  return (
    <div className="min-h-screen bg-gray-50 flex items-center justify-center p-4">
      <div className="w-full max-w-md space-y-6">
        
        {/* Main Error Card */}
        <Card className="shadow-lg">
          <CardHeader className="text-center pb-4">
            <div className="mx-auto mb-4 w-16 h-16 bg-red-100 rounded-full flex items-center justify-center">
              <AlertTriangle className="w-8 h-8 text-red-600" />
            </div>
            <h1 className="text-2xl font-bold text-gray-900 mb-2">
              {errorTitle}
            </h1>
            <p className="text-gray-600">
              We couldn't complete your login request
            </p>
          </CardHeader>
          
          <CardContent className="space-y-6">
            
            {/* Error Message */}
            <Alert variant={isSystemError ? "destructive" : "default"}>
              <AlertTriangle className="h-4 w-4" />
              <AlertDescription className="text-sm leading-relaxed">
                {/* Render as plain text to prevent XSS */}
                {errorMessage}
              </AlertDescription>
            </Alert>
            
            {/* Additional context for different error types */}
            {isUserError && (
              <div className="bg-blue-50 p-4 rounded-lg">
                <p className="text-sm text-blue-800">
                  üí° <strong>Tip:</strong> To use CLAIMSO's features, you'll need to complete the login process.
                </p>
              </div>
            )}
            
            {isSystemError && (
              <div className="bg-yellow-50 p-4 rounded-lg">
                <p className="text-sm text-yellow-800">
                  ‚öôÔ∏è Our team has been automatically notified and is working to resolve this issue.
                </p>
              </div>
            )}
            
            {/* Action Buttons */}
            <div className="space-y-3">
              
              {/* Return to Homepage - Primary Action */}
              <Button asChild className="w-full" size="lg">
                <Link href="/">
                  <Home className="w-4 h-4 mr-2" />
                  Return to Homepage
                </Link>
              </Button>
              
              {/* Try Again - Secondary Action */}
              <Button asChild variant="outline" className="w-full" size="lg">
                <Link href="/auth/login">
                  <RefreshCw className="w-4 h-4 mr-2" />
                  Try Logging In Again
                </Link>
              </Button>
              
            </div>
            
            {/* Debug Info (only show error code, not sensitive details) */}
            {process.env.NODE_ENV === 'development' && (
              <div className="pt-4 border-t border-gray-200">
                <p className="text-xs text-gray-500 text-center">
                  Debug: Error code "{errorCode}"
                </p>
              </div>
            )}
            
          </CardContent>
        </Card>
        
        {/* Additional Help */}
        <Card className="bg-gray-50 border-gray-200">
          <CardContent className="pt-6">
            <div className="text-center space-y-3">
              <h3 className="font-medium text-gray-900">Need Help?</h3>
              <p className="text-sm text-gray-600">
                If you continue having trouble logging in, our support team is here to help.
              </p>
              <Button variant="ghost" size="sm" asChild>
                <Link href="/contact">
                  Contact Support
                </Link>
              </Button>
            </div>
          </CardContent>
        </Card>
        
      </div>
    </div>
  )
}

// Main page component with Suspense wrapper
export default function AuthErrorPage() {
  return (
    <Suspense fallback={
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center space-y-4">
          <div className="w-8 h-8 border-4 border-blue-600 border-t-transparent rounded-full animate-spin mx-auto"></div>
          <p className="text-gray-600">Loading...</p>
        </div>
      </div>
    }>
      <AuthErrorContent />
    </Suspense>
  )
}